" Automatically load the plug-in manager
let s:pluginsInstalled=1
let s:vimPlug=has('nvim') ? '~/.local/share/nvim/site/autoload/plug.vim' : '~/.vim/autoload/plug.vim'
if empty(glob(s:vimPlug)) && executable('curl')
  let s:pluginsInstalled=0
  execute 'silent !curl --create-dirs -fLo '.s:vimPlug.' https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

" Load Plug-ins
call plug#begin()

" Color scheme
Plug 'arcticicestudio/nord-vim'

" General
Plug 'tpope/vim-abolish'
Plug 'justinmk/vim-sneak', { 'on': ['<Plug>Sneak_s', '<Plug>Sneak_S', '<Plug>Sneak_f', '<Plug>Sneak_F', '<Plug>Sneak_t', '<Plug>Sneak_T'] }
Plug 'junegunn/vim-easy-align', { 'on': '<Plug>(EasyAlign)' }

" File navigation
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': { -> fzf#install() } }
Plug 'justinmk/vim-dirvish', { 'on': '<Plug>(dirvish_up)' }

" Programming
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'tpope/vim-commentary'
Plug 'jiangmiao/auto-pairs'
Plug 'machakann/vim-sandwich'
Plug 'alvan/vim-closetag', { 'for': ['html', 'javascriptreact', 'typescriptreact'] }
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-dadbod', { 'for': 'sql' }
Plug 'diepm/vim-rest-console', { 'for': 'rest' }
Plug 'sheerun/vim-polyglot'

" Tools
Plug 'vimwiki/vimwiki', { 'on': ['<Plug>VimwikiIndex', '<Plug>VimwikiTabIndex'] }

call plug#end()

" Install plug-ins if needed
if s:pluginsInstalled == 0 | :PlugInstall | endif
unlet s:pluginsInstalled

" Color scheme
let g:nord_uniform_diff_background=1
colorscheme nord

" FZF Fuzzy Finder
function! s:listBuffers() abort
  redir => ls
  silent ls
  redir END

  return split(ls, '\n')
endfunction

function! s:openBuffer(query) abort
  execute 'buffer' matchstr(a:query, '^[ 0-9]*')
endfunction

nnoremap <Leader>f :FZF --multi<CR>
nnoremap <silent> <Leader>b :call fzf#run(fzf#wrap({
  \ 'source': reverse(<SID>listBuffers()),
  \ 'sink': function('<SID>openBuffer')
  \ }))<CR>

" Dirvish
let g:loaded_netrw=1
let g:loaded_netrwPlugin=1
let g:dirvish_mode=':sort ,^.*[\/],'
nmap - <Plug>(dirvish_up)

" Abolish
vmap <Leader>cr <Plug>(abolish-coerce)

" Sneak
let g:sneak#label=1
let g:sneak#s_next=1
map s <Plug>Sneak_s| map S <Plug>Sneak_S| sunmap s| sunmap S
map f <Plug>Sneak_f| map F <Plug>Sneak_F| sunmap f| sunmap F
map t <Plug>Sneak_t| map T <Plug>Sneak_T| sunmap t| sunmap T

" EasyAlign
nmap ga <Plug>(EasyAlign)| xmap ga <Plug>(EasyAlign)

" Conquer of Completion
highlight! link CocCodeLens Comment
let g:coc_global_extensions=['coc-eslint', 'coc-git', 'coc-json', 'coc-prettier', 'coc-tsserver']
nmap <F2> <Plug>(coc-rename)
nmap <Leader>gq <Plug>(coc-format)| xmap <Leader>gq <Plug>(coc-format-selected)
nmap <Leader><CR> <Plug>(coc-codeaction-cursor)
nnoremap <Leader>i :call CocAction('runCommand', 'editor.action.organizeImport')<CR>
nnoremap [e :call CocActionAsync('diagnosticPrevious', 'error')<CR>zz| nnoremap ]e :call CocActionAsync('diagnosticNext', 'error')<CR>zz
nnoremap [g :call CocActionAsync('diagnosticPrevious')<CR>zz| nnoremap ]g :call CocActionAsync('diagnosticNext')<CR>zz
nnoremap gd :call CocActionAsync('jumpDefinition')<CR>zz| nnoremap <Leader>gd :call CocActionAsync('jumpDefinition', 'vsplit')<CR>zz
nnoremap gD :call CocActionAsync('jumpTypeDefinition')<CR>zz| nnoremap <Leader>gD :call CocActionAsync('jumpTypeDefinition', 'vsplit')<CR>zz
nmap gr <Plug>(coc-references)
nnoremap K :call CocActionAsync('doHover')<CR>
if exists('&tagfunc')
  set tagfunc=CocTagFunc
  nnoremap gd <C-]>zz
  nnoremap <Leader>gd <C-w>v<C-]>zz
endif

" Auto Pairs
let g:AutoPairsMapSpace=0
let g:AutoPairsMultilineClose=0

" Sandwich
runtime macros/sandwich/keymap/surround.vim

" Close Tags
let g:closetag_filetypes='html,javascriptreact,typescriptreact'

" Dadbod
augroup Dadbod
  autocmd!
  autocmd FileType sql nnoremap <buffer> <CR> :%DB<CR>
  autocmd FileType sql vnoremap <buffer> <CR> :DB<CR>
augroup END

" REST Console
let g:vrc_curl_opts={
  \ '--include': '',
  \ '--location': '',
  \ '--show-error': '',
  \ '--silent': ''
  \ }

let g:vrc_auto_format_response_patterns = {
  \ 'html': 'npx prettier --parser html',
  \ 'json': 'npx prettier --parser json'
  \ }

" VimWiki
let g:vimwiki_folding = 'expr'
nmap <Leader>ww <Plug>VimwikiIndex
nmap <Leader>wt <Plug>VimwikiTabIndex
augroup VimWiki
  autocmd!
  autocmd FileType vimwiki nmap <buffer> <Leader>x <Plug>VimwikiToggleListItem
augroup END
